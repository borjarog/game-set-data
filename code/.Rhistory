playersTotal$aces=tabla_aces$ace[playersTotal$player_id==tabla_aces$id]
#Dobles Faltas
tabla_df = aggregate(df ~ id, matches, sum)
playersTotal$df=tabla_df$df[playersTotal$player_id==tabla_df$id]
#Puntos de servicio
tabla_svpt = aggregate(svpt ~ id, matches, sum)
playersTotal$svpt=tabla_svpt$svpt[playersTotal$player_id==tabla_svpt$id]
#Cambiamos los nombres de las variables que empiezan con numero
colnames(matches)[colnames(matches) == "1stIn"] = "X1stIn"
colnames(matches)[colnames(matches) == "1stWon"] = "X1stWon"
colnames(matches)[colnames(matches) == "2ndWon"] = "X2ndWon"
#Primeros saques metidos
tabla_X1stIn = aggregate(X1stIn ~ id, matches, sum)
playersTotal$X1stIn=tabla_X1stIn$X1stIn[playersTotal$player_id==tabla_X1stIn$id]
#% de primeros saques metidos
playersTotal$`%1stIn`=round(playersTotal$X1stIn/playersTotal$svpt*100, 2)
#Primeros saques ganados
tabla_X1stWon = aggregate(X1stWon ~ id, matches, sum)
playersTotal$X1stWon=tabla_X1stWon$X1stWon[playersTotal$player_id==tabla_X1stWon$id]
#% de primeros saques ganados
playersTotal$`%1stWon`=round(playersTotal$X1stWon/playersTotal$X1stIn*100, 2)
#Segundos saques metidos
playersTotal$X2ndIn=playersTotal$svpt - playersTotal$X1stIn - playersTotal$df
#Segundos saques ganados
tabla_X2ndWon = aggregate(X2ndWon ~ id, matches, sum)
playersTotal$X2ndWon=tabla_X2ndWon$X2ndWon[playersTotal$player_id==tabla_X2ndWon$id]
#% de segundos saques ganados
playersTotal$`%2ndWon`=round(playersTotal$X2ndWon/playersTotal$X2ndIn*100,2)
#Juegos de servicios
tabla_SvGms = aggregate(SvGms ~ id, matches, sum)
playersTotal$SvGms=tabla_SvGms$SvGms[playersTotal$player_id==tabla_SvGms$id]
#Puntos de break salvados
tabla_bpSaved = aggregate(bpSaved ~ id, matches, sum)
playersTotal$bpSaved=tabla_bpSaved$bpSaved[playersTotal$player_id==tabla_bpSaved$id]
#Puntos de break
tabla_bpFaced = aggregate(bpFaced ~ id, matches, sum)
playersTotal$bpFaced=tabla_bpFaced$bpFaced[playersTotal$player_id==tabla_bpFaced$id]
#Puntos de break concedidos
playersTotal$bpConc=playersTotal$bpFaced - playersTotal$bpSaved
#% de puntos de break salvados
playersTotal$`%bpSaved`=round(playersTotal$bpSaved/playersTotal$bpFaced*100,2)
#Juegos de servicio ganados
playersTotal$SvGmsWon=playersTotal$SvGms-playersTotal$bpConc
#% de uegos de servicio ganados
playersTotal$`%SvGmsWon`=round(playersTotal$SvGmsWon/playersTotal$SvGms*100, 2)
head(playersTotal,5)
players_filtrados = playersTotal[playersTotal$appearences >= 100, ]
players_ordenados = players_filtrados[order(players_filtrados$aces / players_filtrados$df,
players_filtrados$player_id, decreasing = TRUE), ]
top_50_jugadores = head(players_ordenados, 50)
ggplot(top_50_jugadores, aes(x = reorder(name_last, aces / df), y = aces / df)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "50 jugadores con mejor proporción de aces por cada doble falta",
x = "Jugador",
y = "Proporción de aces por cada doble falta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_50_jugadores
library(ggplot2)
ggplot(top_50_jugadores, aes(x = df / aces, y = aces, label = name_last)) +
geom_point() +
geom_text(aes(x = df / aces, y = aces), nudge_x = 0, nudge_y = -100, size = 2.5, vjust = 1) +
labs(title = "Proporción de dobles faltas respecto al total de aces",
x = "Proporción de dobles faltas",
y = "Total de aces") +
theme_minimal()
victorias_por_pais = aggregate(wins ~ ioc, data = playersTotal, sum)
victorias_por_pais = victorias_por_pais[order(victorias_por_pais$wins, decreasing = TRUE), ]
top_30_paises = head(victorias_por_pais, 30)
ggplot(top_30_paises, aes(x = reorder(ioc, wins), y = wins)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "30 países con más victorias",
x = "País",
y = "Cantidad total de victorias") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
partidos_por_pais = aggregate(appearences ~ ioc, data = playersTotal, sum)
victorias_por_pais = aggregate(wins ~ ioc, data = playersTotal, sum)
datos_paises = merge(partidos_por_pais, victorias_por_pais, by = "ioc")
datos_paises$proporcion_victorias = datos_paises$wins / datos_paises$appearences
datos_paises = datos_paises[order(datos_paises$wins, decreasing = TRUE), ]
top_30_paises = head(datos_paises, 30)
ggplot(top_30_paises, aes(x = wins, y = proporcion_victorias, label = ioc)) +
geom_point() +
geom_text(nudge_x = 10, nudge_y = 0.005, size = 3) +  # Ajustar la posición de los nombres
labs(title = "Comparación de victorias totales con proporción de victorias por país",
x = "Victorias totales",
y = "Proporción de victorias") +
theme_minimal()
valores_faltantes = data.frame(Variable = names(datos_final), Missing_Values = sapply(datos_final, function(x) sum(is.na(x))), row.names = c(1:32))
valores_faltantes = data.frame(Variable = names(datos_final), Missing_Values = sapply(datos_final, function(x) sum(is.na(x))), row.names = c(1:32))
valores_faltantes = data.frame(Variable = names(datos_final), Valores_Faltantes = sapply(datos_final, function(x) sum(is.na(x))), row.names = c(1:32))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(dplyr)
library(writexl)
library(gridExtra)
library(grid)
library(knitr)
datos = read.csv("../data/raw-data/atp_matches_2000_2023.csv")
print(str(datos))
variables_ganador = c("tourney_id", "tourney_name", "surface", "draw_size",
"tourney_level", "tourney_date", "match_num","score", "best_of",
"round", "minutes", "winner_id", "winner_seed", "winner_entry", "winner_name", "winner_hand",
"winner_ht", "winner_ioc", "winner_age",  "w_ace", "w_df", "w_svpt", "w_1stIn",
"w_1stWon", "w_2ndWon", "w_SvGms", "w_bpSaved", "w_bpFaced",
"winner_rank", "winner_rank_points")
variables_perdedor = c("tourney_id", "tourney_name", "surface", "draw_size",
"tourney_level", "tourney_date", "match_num","score", "best_of",
"round", "minutes", "loser_id", "loser_seed", "loser_entry", "loser_name", "loser_hand",
"loser_ht", "loser_ioc", "loser_age",  "l_ace", "l_df", "l_svpt", "l_1stIn",
"l_1stWon", "l_2ndWon", "l_SvGms", "l_bpSaved", "l_bpFaced",
"loser_rank", "loser_rank_points")
datos_ganador = datos %>% select(all_of(variables_ganador)) %>%
rename_with(~str_replace(., "^(winner_|w_)", ""), starts_with(c("winner_", "w_"))) %>%
mutate(player_type = "winner")
datos_perdedor = datos %>% select(all_of(variables_perdedor)) %>%
rename_with(~str_replace(., "^(loser_|l_)", ""), starts_with(c("loser_", "l_"))) %>%
mutate(player_type = "loser")
datos_final = bind_rows(datos_ganador, datos_perdedor)
datos_final = datos_final %>% arrange(tourney_id, match_num)
datos_final = subset(datos_final, select = -entry)
datos_final$tourney_date = as.character(datos_final$tourney_date)
datos_final$Year = as.numeric(as.character(substr(datos_final$tourney_date, 1, 4)))
datos_final$Month = as.numeric(as.character(substr(datos_final$tourney_date, 6, 6)))
print(str(datos_final))
valores_faltantes = data.frame(Variable = names(datos_final), Valores_Faltantes = sapply(datos_final, function(x) sum(is.na(x))), row.names = c(1:32))
valores_faltantes_con_nulos = valores_faltantes[valores_faltantes$Valores_Faltantes > 0, ]
print(knitr::kable(valores_faltantes_con_nulos[order(valores_faltantes_con_nulos$Valores_Faltantes, decreasing = TRUE),]))
valores_faltantes = data.frame(Variable = names(datos_final), Missing_Values = sapply(datos_final, function(x) sum(is.na(x))), row.names = c(1:32))
valores_faltantes_con_nulos = valores_faltantes[valores_faltantes$Missing_Values > 0, ]
print(knitr::kable(valores_faltantes_con_nulos[order(valores_faltantes_con_nulos$Missing_Values, decreasing = TRUE),]))
datos_final = subset(datos_final, select = -seed)
datos_con_nulos_minutos = subset(datos_final, is.na(minutes))
nulos_por_torneo_minutos = table(datos_con_nulos_minutos$tourney_level)
print(nulos_por_torneo_minutos)
datos_con_nulos_aces = subset(datos_final, is.na(ace))
nulos_por_torneo_aces = table(datos_con_nulos_aces$tourney_level)
print(nulos_por_torneo_aces)
datos_final = datos_final[datos_final$tourney_level != "D",]
datos_final = datos_final[!is.na(datos_final$ace), ]
count_por_superficie = datos_final %>% group_by(surface) %>% summarise(valores = n())
print(count_por_superficie)
datos_final = datos_final[datos_final$surface != "Carpet",]
valores_faltantes = data.frame(Variable = names(datos_final), Valores_Faltantes = sapply(datos_final, function(x) sum(is.na(x))), row.names = c(1:31))
valores_faltantes_con_nulos = valores_faltantes[valores_faltantes$Valores_Faltantes > 0, ]
valores_faltantes_con_nulos = valores_faltantes_con_nulos[order(valores_faltantes_con_nulos$Valores_Faltantes, decreasing = TRUE), ]
knitr::kable(valores_faltantes_con_nulos)
valores_faltantes = data.frame(Variable = names(datos_final), Missing_Values = sapply(datos_final, function(x) sum(is.na(x))), row.names = c(1:31))
valores_faltantes_con_nulos = valores_faltantes[valores_faltantes$Missing_Values > 0, ]
valores_faltantes_con_nulos = valores_faltantes_con_nulos[order(valores_faltantes_con_nulos$Missing_Values, decreasing = TRUE), ]
knitr::kable(valores_faltantes_con_nulos)
datos_final = datos_final %>% mutate(`%_pw_1st_serve` = ifelse(`1stIn` > 0, `1stWon` / `1stIn` * 100, 0))
datos_final = datos_final %>% mutate(`%_pw_2nd_serve` = ifelse((svpt - `1stIn` - df) > 0, (`2ndWon` / (svpt - `1stIn` - df)) * 100, 0))
datos_final = datos_final %>% mutate(`%1stIn` = ifelse(`1stIn` > 0, (`1stIn` / svpt ) * 100,0))
variables_eda1 = c("age", "svpt", "`1stIn`", "`1stWon`", "`2ndWon`", "minutes")
plot_histogram = function(var) {
ggplot(datos_final, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = paste("Distribution of", var),
x = var,
y = "Frequency") +
theme_minimal()
}
histograms = lapply(variables_eda1, plot_histogram)
gridExtra::grid.arrange(grobs = histograms, ncol = 2)
victorias_tenistas = datos_final %>% filter(player_type == "winner") %>% group_by(Year, name) %>% summarise(victorias = n(), .groups = 'drop')
top_tenistas = victorias_tenistas %>% group_by(name) %>% summarise(total_victorias = sum(victorias), .groups = 'drop') %>% top_n(10, total_victorias)
victorias_top_tenistas = victorias_tenistas %>% filter(name %in% top_tenistas$name)
ggplot(victorias_top_tenistas, aes(x = Year, y = victorias, color = name)) + geom_line() + labs(title = "Wins by year and player",
x = "Year",
y = "Number of wins",
color = "Player") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_continuous(breaks = seq(min(victorias_top_tenistas$Year), max(victorias_top_tenistas$Year), by = 1)) + geom_line(size = 1)
ggplot(datos_final, aes(x = surface, y = ace, fill = surface)) + geom_boxplot() + labs(title = "Distribution of aces by surface type",
x = "Type of surface",
y = "Aces number") + theme_minimal()
ggplot(datos_final, aes(x = surface, y = ace, fill = surface)) + geom_boxplot() + labs(title = "Distribution of aces by surface type",
x = "Type of surface",
y = "Number of aces
") + theme_minimal()
ggplot(datos_final, aes(x = surface, y = ace, fill = surface)) + geom_boxplot() + labs(title = "Distribution of aces by surface type",
x = "Type of surface",
y = "Number of aces") + theme_minimal()
victorias = datos_final %>% filter(player_type == "winner") %>% group_by(Year, ioc) %>% summarise(victories = n(), .groups = 'drop')
top_paises = victorias %>% group_by(ioc) %>% summarise(total_victories = sum(victories), .groups = 'drop') %>% top_n(10, total_victories)
victorias_top = victorias %>% filter(ioc %in% top_paises$ioc)
ggplot(victorias_top, aes(x = Year, y = victories, color = ioc)) + geom_line() + labs(title = "Won Matches by Year and Country",
x = "Year",
y = "Number of wins",
color = "Country") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_continuous(breaks = seq(min(victorias_top$Year), max(victorias_top$Year), by = 1)) + geom_line(size = 1)
plot_victorias_tenista_por_torneo = function (tenista, datos_final) {
tenista_victorias = datos_final %>% filter(name == tenista & player_type == "winner") %>% group_by(Year, tourney_level) %>%
summarise(victorias = n(), .groups = 'drop')
ggplot(tenista_victorias, aes(x = Year, y = victorias, color = tourney_level)) +
geom_line(size = 0.8) +
scale_x_continuous(breaks = seq(min(tenista_victorias$Year), max(tenista_victorias$Year), by = 1)) +
scale_color_manual(values = c("A" = "blue", "F" = "red", "G" = "green", "M" = "orange"),
labels = c("ATP", "Finales de Tour", "Grand Slam", "Masters")) +
labs(title = paste("Wins by year and type of tournament of", tenista),
x = "Year",
y = "Number of wins",
color = "Type of tournament") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
p1 = plot_victorias_tenista_por_torneo("Rafael Nadal", datos_final = datos_final)
p2 = plot_victorias_tenista_por_torneo("Roger Federer", datos_final = datos_final)
p3 = plot_victorias_tenista_por_torneo("Novak Djokovic", datos_final =  datos_final)
gridExtra::grid.arrange(p1,p2,p3,nrow = 3)
plot_victorias_tenista_por_torneo = function (tenista, datos_final) {
tenista_victorias = datos_final %>% filter(name == tenista & player_type == "winner") %>% group_by(Year, tourney_level) %>%
summarise(victorias = n(), .groups = 'drop')
ggplot(tenista_victorias, aes(x = Year, y = victorias, color = tourney_level)) +
geom_line(size = 0.8) +
scale_x_continuous(breaks = seq(min(tenista_victorias$Year), max(tenista_victorias$Year), by = 1)) +
scale_color_manual(values = c("A" = "blue", "F" = "red", "G" = "green", "M" = "orange"),
labels = c("ATP", "Finales de Tour", "Grand Slam", "Masters")) +
labs(title = paste("Wins by year and type of tournament by", tenista),
x = "Year",
y = "Number of wins",
color = "Type of tournament") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
p1 = plot_victorias_tenista_por_torneo("Rafael Nadal", datos_final = datos_final)
p2 = plot_victorias_tenista_por_torneo("Roger Federer", datos_final = datos_final)
p3 = plot_victorias_tenista_por_torneo("Novak Djokovic", datos_final =  datos_final)
gridExtra::grid.arrange(p1,p2,p3,nrow = 3)
plot_victorias_tenista_por_superficie = function (tenista, datos_final){
tenista_victorias_superficie = datos_final %>%
filter(name == tenista & player_type == "winner") %>%
group_by(Year, surface) %>%
summarise(victories = n(), .groups = 'drop')
tenista_derrotas_superficie = datos_final %>%
filter(name == tenista & player_type == "loser") %>%
group_by(Year, surface) %>%
summarise(derrotas = n(), .groups = 'drop')
tenista_porcentaje_victorias_superficie = full_join(tenista_victorias_superficie, tenista_derrotas_superficie, by = c("Year", "surface")) %>%
replace_na(list(victories = 0, derrotas = 0)) %>%
mutate(total_partidos = victories + derrotas,
porcentaje_victorias = ifelse(total_partidos > 0, (victories / total_partidos) * 100, 0))
ggplot(tenista_porcentaje_victorias_superficie, aes(x = Year, y = porcentaje_victorias, color = surface)) +
geom_line(size = 0.8) +
scale_x_continuous(breaks = seq(min(tenista_porcentaje_victorias_superficie$Year), max(tenista_porcentaje_victorias_superficie$Year), by = 1)) +
labs(title = paste("Percentage of wns by year and surface by", tenista),
x = "Year",
y = "Wins percentage",
color = "Surface") +
theme_minimal()
}
p1 = plot_victorias_tenista_por_superficie("Rafael Nadal", datos_final)
p2 = plot_victorias_tenista_por_superficie("Roger Federer", datos_final)
p3 = plot_victorias_tenista_por_superficie("Novak Djokovic", datos_final)
gridExtra::grid.arrange(p1,p2,p3,nrow = 3)
plot_victorias_tenista_por_superficie = function (tenista, datos_final){
tenista_victorias_superficie = datos_final %>%
filter(name == tenista & player_type == "winner") %>%
group_by(Year, surface) %>%
summarise(victories = n(), .groups = 'drop')
tenista_derrotas_superficie = datos_final %>%
filter(name == tenista & player_type == "loser") %>%
group_by(Year, surface) %>%
summarise(derrotas = n(), .groups = 'drop')
tenista_porcentaje_victorias_superficie = full_join(tenista_victorias_superficie, tenista_derrotas_superficie, by = c("Year", "surface")) %>%
replace_na(list(victories = 0, derrotas = 0)) %>%
mutate(total_partidos = victories + derrotas,
porcentaje_victorias = ifelse(total_partidos > 0, (victories / total_partidos) * 100, 0))
ggplot(tenista_porcentaje_victorias_superficie, aes(x = Year, y = porcentaje_victorias, color = surface)) +
geom_line(size = 0.8) +
scale_x_continuous(breaks = seq(min(tenista_porcentaje_victorias_superficie$Year), max(tenista_porcentaje_victorias_superficie$Year), by = 1)) +
labs(title = paste("Percentage of wins by year and surface by", tenista),
x = "Year",
y = "Wins percentage",
color = "Surface") +
theme_minimal()
}
p1 = plot_victorias_tenista_por_superficie("Rafael Nadal", datos_final)
p2 = plot_victorias_tenista_por_superficie("Roger Federer", datos_final)
p3 = plot_victorias_tenista_por_superficie("Novak Djokovic", datos_final)
gridExtra::grid.arrange(p1,p2,p3,nrow = 3)
plot_efectividad = function(jugador, datos_final) {
victorias = datos_final %>% filter(name == jugador & player_type == "winner") %>% count(Year, surface, name = "victorias")
derrotas = datos_final %>% filter(name == jugador & player_type == "loser") %>% count(Year, surface, name = "derrotas")
efectividad = full_join(victorias, derrotas, by = c("Year", "surface")) %>%
replace_na(list(victorias = 0, derrotas = 0)) %>%
mutate(total_partidos = victorias + derrotas, ef = ifelse(total_partidos > 0, victorias / total_partidos, 1))
ggplot(efectividad, aes(x = Year, y = ef, color = surface)) +
geom_point(size = 2) + scale_y_continuous(limits = c(-0.1, 1.2)) +
labs(
title = paste(jugador, "- Effectiveness"),
x = "Year",
y = "Effectiveness",
color = "Surface"
)
}
p1 = plot_efectividad("Rafael Nadal", datos = datos_final)
p2 = plot_efectividad("Novak Djokovic", datos = datos_final)
p3 = plot_efectividad("Roger Federer", datos = datos_final)
gridExtra::grid.arrange(p1,p2,p3, nrow = 1)
p4 = ggplot(datos_final, aes(x = player_type, y = `%_pw_1st_serve`, fill = player_type)) +
geom_boxplot() +
labs(
title = "Distribution of the percentage of points won on the first serve by winner and loser",
x = "Player type",
y = "Percentage of points won on the first serve"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 25, face = "bold"),
axis.title.x = element_text(size = 20, face = "bold"),
axis.title.y = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 20)
)
p5 = ggplot(datos_final, aes(x = player_type, y = `%_pw_2nd_serve`, fill = player_type)) +
geom_boxplot() +
labs(
title = "Distribution of the percentage of points won on the second serve by winner and loser",
x = "Player type",
y = "Percentage of points won on the second serve"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 25, face = "bold"),
axis.title.x = element_text(size = 20, face = "bold"),
axis.title.y = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 20)
)
gridExtra::grid.arrange(p4, p5, nrow = 2)
matches=datos_final
m = matches[!is.na(matches$ace), ]
numero_valores_faltantes = sum(is.na(m$df))
numero_valores_faltantes
players=read.csv("../data/raw-data/atp_players.csv")
players$appear = ifelse(!is.na(match(players$player_id, unique(m$id))), 1, 0)
players2=players[players$appear==1, ]
#Eliminamos la columna appear
players2=players2[, -c(8)]
#Eliminamos el ranking de dobles y su ID de Wikidata
players2=players2[, -c(8)]
playersTotal=players2
frecuenciaTotal = table(m$id)
head(frecuenciaTotal, 5)
playersTotal$appearences = frecuenciaTotal[names(frecuenciaTotal)==playersTotal$player_id]
#Victorias
winsTotal = table(m$id[m$player_type=='winner'])
winning_players=names(winsTotal)
playersTotal$wins = 0
playersTotal$wins[playersTotal$player_id %in% winning_players] = winsTotal[winning_players]
#Derrotas
playersTotal$loses=playersTotal$appearences-playersTotal$wins
#% de
playersTotal$win_per=playersTotal$wins/playersTotal$appearences*100
playersTotal$win_per=round(playersTotal$win_per, 2)
library(dplyr)
#Aces
tabla_aces = aggregate(ace ~ id, matches, sum)
playersTotal$aces=tabla_aces$ace[playersTotal$player_id==tabla_aces$id]
#Dobles Faltas
tabla_df = aggregate(df ~ id, matches, sum)
playersTotal$df=tabla_df$df[playersTotal$player_id==tabla_df$id]
#Puntos de servicio
tabla_svpt = aggregate(svpt ~ id, matches, sum)
playersTotal$svpt=tabla_svpt$svpt[playersTotal$player_id==tabla_svpt$id]
#Cambiamos los nombres de las variables que empiezan con numero
colnames(matches)[colnames(matches) == "1stIn"] = "X1stIn"
colnames(matches)[colnames(matches) == "1stWon"] = "X1stWon"
colnames(matches)[colnames(matches) == "2ndWon"] = "X2ndWon"
#Primeros saques metidos
tabla_X1stIn = aggregate(X1stIn ~ id, matches, sum)
playersTotal$X1stIn=tabla_X1stIn$X1stIn[playersTotal$player_id==tabla_X1stIn$id]
#% de primeros saques metidos
playersTotal$`%1stIn`=round(playersTotal$X1stIn/playersTotal$svpt*100, 2)
#Primeros saques ganados
tabla_X1stWon = aggregate(X1stWon ~ id, matches, sum)
playersTotal$X1stWon=tabla_X1stWon$X1stWon[playersTotal$player_id==tabla_X1stWon$id]
#% de primeros saques ganados
playersTotal$`%1stWon`=round(playersTotal$X1stWon/playersTotal$X1stIn*100, 2)
#Segundos saques metidos
playersTotal$X2ndIn=playersTotal$svpt - playersTotal$X1stIn - playersTotal$df
#Segundos saques ganados
tabla_X2ndWon = aggregate(X2ndWon ~ id, matches, sum)
playersTotal$X2ndWon=tabla_X2ndWon$X2ndWon[playersTotal$player_id==tabla_X2ndWon$id]
#% de segundos saques ganados
playersTotal$`%2ndWon`=round(playersTotal$X2ndWon/playersTotal$X2ndIn*100,2)
#Juegos de servicios
tabla_SvGms = aggregate(SvGms ~ id, matches, sum)
playersTotal$SvGms=tabla_SvGms$SvGms[playersTotal$player_id==tabla_SvGms$id]
#Puntos de break salvados
tabla_bpSaved = aggregate(bpSaved ~ id, matches, sum)
playersTotal$bpSaved=tabla_bpSaved$bpSaved[playersTotal$player_id==tabla_bpSaved$id]
#Puntos de break
tabla_bpFaced = aggregate(bpFaced ~ id, matches, sum)
playersTotal$bpFaced=tabla_bpFaced$bpFaced[playersTotal$player_id==tabla_bpFaced$id]
#Puntos de break concedidos
playersTotal$bpConc=playersTotal$bpFaced - playersTotal$bpSaved
#% de puntos de break salvados
playersTotal$`%bpSaved`=round(playersTotal$bpSaved/playersTotal$bpFaced*100,2)
#Juegos de servicio ganados
playersTotal$SvGmsWon=playersTotal$SvGms-playersTotal$bpConc
#% de uegos de servicio ganados
playersTotal$`%SvGmsWon`=round(playersTotal$SvGmsWon/playersTotal$SvGms*100, 2)
head(playersTotal,5)
players_filtrados = playersTotal[playersTotal$appearences >= 100, ]
players_ordenados = players_filtrados[order(players_filtrados$aces / players_filtrados$df,
players_filtrados$player_id, decreasing = TRUE), ]
top_50_jugadores = head(players_ordenados, 50)
ggplot(top_50_jugadores, aes(x = reorder(name_last, aces / df), y = aces / df)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Top 50 players with the best ace-to-double fault ratio",
x = "Player",
y = "Ace-to-double fault ratio"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_50_jugadores
library(ggplot2)
ggplot(top_50_jugadores, aes(x = df / aces, y = aces, label = name_last)) +
geom_point() +
geom_text(aes(x = df / aces, y = aces), nudge_x = 0, nudge_y = -100, size = 2.5, vjust = 1) +
labs(
title = "Proportion of double faults relative to total aces",
x = "Double fault proportion",
y = "Total aces"
) +
theme_minimal()
victorias_por_pais = aggregate(wins ~ ioc, data = playersTotal, sum)
victorias_por_pais = victorias_por_pais[order(victorias_por_pais$wins, decreasing = TRUE), ]
top_30_paises = head(victorias_por_pais, 30)
ggplot(top_30_paises, aes(x = reorder(ioc, wins), y = wins)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Top 30 countries with the most wins",
x = "Country",
y = "Total number of wins"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
partidos_por_pais = aggregate(appearences ~ ioc, data = playersTotal, sum)
victorias_por_pais = aggregate(wins ~ ioc, data = playersTotal, sum)
datos_paises = merge(partidos_por_pais, victorias_por_pais, by = "ioc")
datos_paises$proporcion_victorias = datos_paises$wins / datos_paises$appearences
datos_paises = datos_paises[order(datos_paises$wins, decreasing = TRUE), ]
top_30_paises = head(datos_paises, 30)
ggplot(top_30_paises, aes(x = wins, y = proporcion_victorias, label = ioc)) +
geom_point() +
geom_text(nudge_x = 10, nudge_y = 0.005, size = 3) +  # Adjust the position of the labels
labs(
title = "Comparison of total wins with win ratio by country",
x = "Total wins",
y = "Win ratio"
) +
theme_minimal()
shiny::runApp("Evolution Analysis - APP.R")
shiny::runApp("Surface Analysis - APP.R")
load("C:/Users/borog/OneDrive - UPV/Portfolio & GitHub Projects/Showcase Projects/tennis/code/Performance.RData")
View(extended_performance_stats)
knitr::opts_chunk$set(echo = TRUE)
load('./data/AVG_año.Rdata')
medias_anyo <- list()
for (i in seq_along(medias_list)) {
column_means <- sapply(medias_list[[i]][7:45], mean, na.rm = TRUE)
medias_anyo[[i]] <- column_means
}
medias_anyo <- as.data.frame(medias_anyo)
colnames(medias_anyo) <- 1999 + seq_along(medias_anyo)
medias_anyo=t(medias_anyo) #transponemos los datos para una mejor comprensión
medias_anyo=as.data.frame(medias_anyo)
head(medias_anyo, 5)
primera_fila = medias_anyo[1, ]
ultima_fila = medias_anyo[nrow(medias_anyo), ]
cambio_porcentual <- (ultima_fila - primera_fila) / primera_fila * 100
cambio_porcentual <- round(cambio_porcentual, 2)
cambio_porcentual <- setNames(as.numeric(cambio_porcentual), names(primera_fila))
cambio_porcentual = sort(cambio_porcentual, decreasing = TRUE)
cambio_porcentual = as.data.frame(cambio_porcentual)
cambio_porcentual = t(cambio_porcentual)
cambio_porcentual = as.data.frame(cambio_porcentual)
cambio_porcentual
primera_fila = medias_anyo[1, ]
ultima_fila = medias_anyo[nrow(medias_anyo), ]
cambio_porcentual <- (ultima_fila - primera_fila) / primera_fila * 100
cambio_porcentual <- round(cambio_porcentual, 2)
cambio_porcentual <- setNames(as.numeric(cambio_porcentual), names(primera_fila))
cambio_porcentual = sort(cambio_porcentual, decreasing = TRUE)
cambio_porcentual = as.data.frame(cambio_porcentual)
cambio_porcentual = t(cambio_porcentual)
cambio_porcentual = as.data.frame(cambio_porcentual)
cambio_porcentual
jugadores_comunes <- Reduce(intersect, lapply(medias_list, function(df) df$player_id))
d1 = medias_list[[1]]
jugadores = paste(d1$name_first[d1$player_id == jugadores_comunes], d1$name_last[d1$player_id == jugadores_comunes])
jugadores
medias_feli <- list()
for (i in seq_along(medias_list)) {
medias = medias_list[[i]]
feli = medias[medias$player_id == 103852, ]
medias_feli[[i]] <- feli[8:45]
}
df_combinado <- do.call(rbind, medias_feli)
rownames(df_combinado) <- 1999 + seq_along(medias_feli)
cd ..
